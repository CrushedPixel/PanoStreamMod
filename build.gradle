buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sponge"
            url = "https://repo.spongepowered.org/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.0-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "0.1"
group= "com.replaymod.panostream"
archivesBaseName = "panostream"

ext {
    libFiles = fileTree(dir: 'libs', includes: ['*.jar'])
}

minecraft {
    coreMod = 'com.replaymod.panostream.coremod.LoadingPlugin'
    version = '1.8-11.14.4.1563'
    runDir = "eclipse"
    mappings = "snapshot_nodoc_20141130"
}

repositories {
    maven {
        name = "SpongePowered Repo"
        url = "http://repo.spongepowered.org/maven/"
    }
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.4'
    compile 'org.spongepowered:mixin:0.4.3'
    compile 'org.aspectj:aspectjrt:1.8.2'
    compile 'net.sourceforge.openutils:flazr:0.7-snv20100505'

    compile libFiles

    compile project(':jGui')
    compile project(':SimpleConfig')
}

jar {
    dependsOn configurations.compile

    def shade = {libFiles + files(configurations.compile.findAll { c ->
        ['mixin', 'aspectjrt', 'jGui', 'SimpleConfig'].any {c.name.startsWith("$it-")}
    })}

    def noticeDir = file("$buildDir/NOTICE")
    doFirst {
        noticeDir.deleteDir()
        noticeDir.mkdirs()
        shade().collect { it.isDirectory() ? fileTree(it) : zipTree(it) }.each {
            it.matching { include '**/NOTICE*' }.each {
                new File(noticeDir, 'NOTICE.txt') << it.getText('UTF-8') + '\n'
            }
        }
    }
    from noticeDir

    from ({shade().collect { it.isDirectory() ? it : zipTree(it) }}) {
        exclude '**/NOTICE*'
    }

    manifest { 
         attributes 'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                 'TweakOrder': '0',
                 'FMLAT': 'panostream_at.cfg'
	}
}

def getGitCommitHash() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always', '--dirty=*'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (e) {
        return "unknown"
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version + '-' + getGitCommitHash(), 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

sourceSets {
    main {
        resources {
            srcDir 'jGui/src/main/resources'
        }
        refMap = "mixins.replaymod.refmap.json"
    }
}

defaultTasks 'build'